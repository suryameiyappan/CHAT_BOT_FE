{"version":3,"file":"plugin/widget.min.js","mappings":"mBAEA,IACAA,EACAC,EAIAC,EACAC,EACAC,EARIC,EAAS,CAAC,EAKdC,GAAgB,EAkMhB,SAASC,EAAQC,EAAKC,EAAMC,EAAYC,GACtCC,MAAMJ,EAAK,CACPK,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,GACrBQ,QAASP,IACRQ,MAAKC,GAAOA,EAAIC,SAClBF,MAAKG,GAAYV,EAAYU,KAE7BC,OAAMC,GAASC,QAAQD,MAAM,SAAUA,IAC5C,CAEA,SAASE,EAAsBhB,EAAMiB,GACnC,IAAIC,EAAalB,GAAMkB,WACvBzB,EAAmByB,GAAYC,aAC/B,MAAMC,EAAYF,GAAYE,UACxBC,EAAYH,GAAYG,UACxBC,EAAeJ,GAAYI,aAC3BC,EAAcL,GAAYM,YAAcN,GAAYM,YAAc,cAClEC,EAAeP,GAAYQ,aAC3BC,EAAYT,GAAYU,KAC1BR,GAAWH,EAAaY,aAAa,YAAaT,GAClDC,GAAWJ,EAAaY,aAAa,YAAaR,GAClDC,GAAcL,EAAaY,aAAa,UAAWP,GACnDK,GAAWV,EAAaY,aAAa,sBAAuBF,GAC5DF,GAAcR,EAAaY,aAAa,eAAgBJ,GACxDF,GAAaN,EAAaY,aAAa,cAAeN,EAC5D,CAEA,SAASO,EAAkBC,GACzBC,KAAKC,UAAYC,SAASC,eAAe,YACzC,IAAIC,EAAkBJ,KAAKC,UAAUI,aACrCL,KAAKC,UAAUK,iBAAiB,SAAS,KACvCN,KAAKC,UAAUM,MAAMC,OAAS,GAAGJ,MACjCJ,KAAKC,UAAUM,MAAMC,OAAS,GAAGR,KAAKC,UAAUI,gBAAgB,IAElEL,KAAKC,UAAUK,iBAAiB,WAAYG,IAC5B,UAAVA,EAAEC,KAAoBD,EAAEE,WAC1BF,EAAEG,iBACFC,IACF,IAEkBX,SAASY,cAAc,aAC/BR,iBAAiB,SAAUG,IACrCA,EAAEG,iBACFC,GAAY,IAEdb,KAAKe,gBAAkBb,SAASY,cAAc,cAC9Cd,KAAKe,gBAAgBT,iBAAiB,SAAS,KAC7CJ,SAAS7B,KAAK2C,UAAUC,OAAO,gBAC/BvD,EAAawC,SAAS7B,KAAK2C,UAAUC,OAAO,eAAe,GAE/D,CAEAC,eAAeL,IACX,IAAIM,EAAgBjB,SAASC,eAAe,YACxCiB,EAAclB,SAASY,cAAc,YACzC,IAAIO,EAAYF,EACZG,EAAmBH,EAAcI,MAAMC,OAC3C,IAAKF,EAAkB,OAEvB,IAAIlB,EAAkBe,EAAcd,aACpCc,EAAcI,MAAQ,GACtBJ,EAAcZ,MAAMC,OAAS,GAAGJ,MAEhCgB,EAAYK,YAAYC,EAAaJ,EAAkB,WAAYD,EAAW,UAC9ED,EAAYO,SAAS,EAAGP,EAAYf,cAGpC,IAAIuB,EAsBR,SAA4BT,GAC1B,IAAIU,EAAe,CAAC,EACpB,MAAMC,EAAiBX,EAAcY,aAAa,uBAC5C3C,EAAY+B,EAAcY,aAAa,aACvC1C,EAAY8B,EAAcY,aAAa,aACvCzC,EAAe6B,EAAcY,aAAa,WAC1CC,EAAc,IAAIC,OAAO3C,IAC3BF,GAAaC,KACbwC,EAAe,CACbK,UAAW9C,EAAY+C,SAAS/C,GAAa,GAC7CgD,UAAW/C,EAAY8C,SAAS9C,GAAa,KAGnD,MAAO,CACL,aAAiBwC,EACjB,YAAgBG,EAChB,eAAmBF,EAEvB,CAxCuBO,CAAmBlB,GAClCjC,QAuTRgC,eAAyBc,EAAaM,EAAWT,EAAclC,GAC7D,GAAI2C,GAAaC,EAAgBC,MAAMF,GAAWf,MAC9C,MAAO,CAAErC,YAAY,EAAOU,KAAM,SAC/B,GAAIiC,GAAcK,WAAaI,EAAUG,OAASZ,EAAaK,UAClE,MAAO,CAAEhD,YAAY,EAAOU,KAAM,aAC/B,GAAIiC,GAAcO,WAAaE,EAAUG,OAASZ,EAAaO,UAClE,MAAO,CAAElD,YAAY,EAAOU,KAAM,aAGtC,GAAIoC,GAAerC,GAAa4C,EAAgB5C,IAAoD,mBAA/B4C,EAAgB5C,GAA2B,CAC5G,IAAI+C,EAAa,CACfnB,MAAOe,EACPN,YAAaA,GAEXW,EAAgBJ,EAAgB5C,GAAW+C,GAC/C,MAAO,CACLxD,aAAayD,EAAcpB,OAAQoB,EAAcpB,MACjD3B,KAAM+C,EAAc/C,KAE1B,CACA,MAAO,CAAEV,YAAY,EAAMU,KAAM,GACnC,CA5U2BD,CAAUiC,EAAaI,YAAaV,EAAkBM,EAAaC,aAAcD,EAAaE,gBACrH,IAA+B,IAA3B5C,GAAYA,WAAsB,CAClCrB,GAAgB,EAChB,IAAI+E,GAAoB,EACxB,MAAMC,EAAiBnB,EAAajE,EAAiByB,GAAYU,MAAO,WAAYyB,EAAW,QAASuB,GAGxG,OAFAxB,EAAYK,YAAYoB,QACxBzB,EAAYO,SAAS,EAAGP,EAAYf,aAExC,EAEmB,IAAfnB,IACFrB,GAAgB,EAChBiF,YAAW,KACT,MAAMD,EAAiBnB,EAAa,gBAAiB,WAAYL,EAAW,SAC5ED,EAAYK,YAAYoB,GACxBzB,EAAYO,SAAS,EAAGP,EAAYf,cACpC0C,EAAQF,EAAgBvB,EAAiB,GACxC,KAET,CA2EA,SAASI,EAAasB,EAASC,EAAWlD,EAAOmD,EAAQN,GAAmB,GAC1E,IAAIzB,EAAgBjB,SAASC,eAAe,YAC7C,MAAMgD,EAASjD,SAASkD,cAAc,MACtCD,EAAOnC,UAAUqC,IAAI,OAAQ,GAAGJ,KAChC,IAAIK,EAA4B,aAAdL,EAA2B,wCAA0C,uEAKtF,IAAIM,GAJLJ,EAAOK,UAAYF,EACnBH,EAAOrC,cAAc,KAAK2C,YAAcT,EACrBU,eAAeC,QAAQhG,MAG3B,SAAVuF,EACDK,EAAkBxD,GAAO6D,OAAO7B,aAAa,gBAC3B,SAAVmB,IAEHK,EADEX,EACgB7C,EAAMgC,aAAa,iBAEnBhC,EAAMgC,aAAa,kBAG5B,YAAbkB,GAEoB,YAAbA,IADV9B,EAActB,aAAa,oBAAqB0D,IAKlD,OAAOJ,CACR,CA0BA,SAASU,EAAW9D,GACnB,IAAIqB,EAAclB,SAASY,cAAc,YACzC,IACIQ,EADcvB,EAAM6D,OAAOrC,MACIC,OACnC,IAAKF,EAAkB,OAEvB,MAAMwC,EAAiBpC,EAAaJ,EAAkB,WAAYvB,EAAO,SACzEqB,EAAYK,YAAYqC,GACxB1C,EAAYO,SAAS,CAAEoC,OAAQ,EAAGC,SAAU,WAC5ClB,YAAW,KACV,MAAMD,EAAiBnB,EAAa,iBAAkB,WAAY3B,EAAO,SACzEqB,EAAYK,YAAYoB,GACxBzB,EAAYO,SAAS,CAAEoC,OAAQ,EAAGC,SAAU,WAC5CjB,EAAQF,EAAgBvB,EAAwB,GAC9C,IACJ,CAEA,SAASyB,EAAQkB,EAAaC,GAC7BhE,SAASC,eAAe,YAAYX,YAAc,qBAClDU,SAASC,eAAe,YAAYgE,gBAAgB,YACnD,IAAIC,EAAcV,eAAeC,QAAQhG,GAEzC0G,EADiBD,EAAc,cAAgB,kBACxBH,EAAaC,EACtC,CA3aAtG,EAAO0G,OAAS,CACdC,KAAM,WACJvE,KAAKwE,UACLxE,KAAKyE,UACLzE,KAAK0E,kBACL1E,KAAK2E,eACL3E,KAAK4E,eACL5E,KAAK6E,gBACP,EACAL,QAAS,WACP9G,EAAeoH,OAAOC,OACtB7E,SAASI,iBAAiB,QAASR,EACrC,EACA2E,QAAS,WACP,IAAIO,EAAStH,EAAauH,eAAeD,OACzC,IAAIE,EAAe,CACjB,OAAU,UACV,YAAe,cACf,OAAU,aACV,KAAS,CACP,IAAOxH,EAAauH,eAAeE,IACnC,UAAaH,GAAkB,GAC/B,OAAUtH,EAAauH,eAAeG,UACtC,SAAY1H,EAAa2H,SAASC,KAClC,SAAY5H,EAAauH,eAAeM,WAGxC/G,EAAU,CACZ,eAAgB,mBAChB,UAAWd,EAAauH,eAAeO,QACvC,aAAc,OAEhB1H,EAAQJ,EAAauH,eAAeQ,KAAKC,OAAO,uBAAwBR,EAAc1G,GAASI,IAC7F,GAAqB,KAAjBA,EAAS+G,KAAa,CACxBhI,EAAiBiB,EAASZ,KAAK4H,OAAOC,YACtCf,OAAOpB,eAAeoC,WAAWnI,GACjC,MAAMoI,EAAUnH,EAASZ,KAAKgI,SACxBA,EAAWpH,EAASZ,KAAKgI,SAASA,SAClCC,EAAmB/F,SAASY,cAAc,YAChD,IAAIoF,EAAYhG,SAASkD,cAAc,MACvC8C,EAAUjD,UAAY,UACtB,IAAIE,EAASjD,SAASkD,cAAc,MACpCD,EAAOF,UAAY,gBACnB,IAAIkD,EAAejG,SAASkD,cAAc,QAC1C+C,EAAalD,UAAY,WACzBE,EAAO1B,YAAY0E,GACnB,IAAIC,EAAelG,SAASkD,cAAc,KAC1CgD,EAAa3C,YAAcuC,EAASA,SACpC7C,EAAO1B,YAAY2E,GACnBF,EAAUzE,YAAY0B,GACtB8C,EAAiBxE,YAAYyE,GAC7B,IAAI/E,EAAgBjB,SAASC,eAAe,YAC5CgB,EAActB,aAAa,eAAgBkG,EAAQM,kBACnDlF,EAActB,aAAa,gBAAiBkG,EAAQO,aACpDnF,EAActB,aAAa,WAAYkG,EAAQQ,KAC3CR,GAAS7G,YAAYF,EAAsB+G,EAAS5E,GACxDnB,KAAKwG,iBAAiB5H,EAASZ,KAAKuH,SACtC,KAAO,CACL,MAAMU,EAAmB/F,SAASY,cAAc,YAC1CzC,EAAO6B,SAASkD,cAAc,OACpC/E,EAAK4E,UAAY,OACjB,MAAMwD,EAAUvG,SAASkD,cAAc,OACvCqD,EAAQC,IAAMhJ,EAAauH,eAAe0B,UAAY,6BACtDF,EAAQG,IAAM,aACdH,EAAQlG,MAAMsG,MAAQ,OACtBJ,EAAQlG,MAAMC,OAAS,MACvBnC,EAAKoD,YAAYgF,GACjBR,EAAiBxE,YAAYpD,EAC/B,IAEJ,EACAqG,gBAAiB,WACf,MAAMoC,EAAmB5G,SAASkD,cAAc,OAChD0D,EAAiBC,GAAK,oBACtB7G,SAAS7B,KAAKoD,YAAYqF,GAC1B,MAAME,EAAU9G,SAASkD,cAAc,OACvC4D,EAAQhG,UAAUqC,IAAI,WACtByD,EAAiBrF,YAAYuF,EAC/B,EACArC,aAAc,WACZ,MAAMsB,EAAmB/F,SAASY,cAAc,YAChD,IAAImG,EAAS/G,SAASkD,cAAc,UACpC6D,EAAOhE,UAAY,SACnB,IAAIiE,EAAMhH,SAASkD,cAAc,OACjC8D,EAAIR,IAAMhJ,EAAauH,eAAe0B,UAAY,qCAClDO,EAAIN,IAAM,GACVK,EAAOxF,YAAYyF,GACnB,IAAIC,EAAKjH,SAASkD,cAAc,MAChC+D,EAAG1D,YAAc,kBACjBwD,EAAOxF,YAAY0F,GACnB,IAAIC,EAAWlH,SAASkD,cAAc,QACtCgE,EAASnE,UAAY,sCACrBmE,EAAS3D,YAAc,QACvBwD,EAAOxF,YAAY2F,GACnBnB,EAAiBxE,YAAYwF,EAC/B,EACArC,aAAc,WACZ,MAAMqB,EAAmB/F,SAASY,cAAc,YAChD,IAAIuG,EAAenH,SAASkD,cAAc,OAC1CiE,EAAapE,UAAY,aACzB,IAAIqE,EAAWpH,SAASkD,cAAc,YACtCkE,EAASP,GAAK,WACdO,EAASzH,aAAa,cAAe,qBACrCyH,EAASzH,aAAa,WAAY,IAClCwH,EAAa5F,YAAY6F,GACzBrB,EAAiBxE,YAAY4F,EAC/B,EACAb,iBAAkB,SAA0BjB,GAC1C,MAAMU,EAAmB/F,SAASY,cAAc,YAC1CuG,EAAenH,SAASY,cAAc,eAC5C,IAAIyG,EAAcrH,SAASkD,cAAc,OACzCmE,EAAYtE,UAAY,WACxB,IAAIuE,EAAiBtH,SAASkD,cAAc,UAC5CoE,EAAevE,UAAY,mBAC3BsE,EAAY9F,YAAY+F,GACxB,IAAIC,EAAavH,SAASkD,cAAc,MACxCqE,EAAWV,GAAK,cAChBU,EAAWxE,UAAY,iBACvB,IAAIyE,EAAY,GACZC,EAAc,GAClBpC,EAASqC,SAASrG,IAChBmG,EAAUG,KAAKtG,EAAMuG,cAAc,IAErCvC,EAASqC,SAASrG,IAChBoG,EAAYE,KAAKtG,EAAMgE,SAAS,IAElCmC,EAAUE,SAAQ,CAACrG,EAAOwG,KACtB,IAAIC,EAAK9H,SAASkD,cAAc,MAChC4E,EAAGzG,MAAQoG,EAAYI,GACvBC,EAAGjB,GAAKY,EAAYI,GACpBC,EAAGnI,aAAa,QAAS8H,EAAYI,IACvB,IAAVA,IACAC,EAAG/E,UAAY,UAEnB+E,EAAGvE,YAAclC,EACjBkG,EAAWhG,YAAYuG,EAAG,IAE9BT,EAAY9F,YAAYgG,GACxBJ,EAAa5F,YAAY8F,GAEzB,IAAIU,EAAU/H,SAASkD,cAAc,QACrC6E,EAAQlB,GAAK,WACbkB,EAAQhF,UAAY,4BACpBgF,EAAQxE,YAAc,OACtB4D,EAAa5F,YAAYwG,GACzBhC,EAAiBxE,YAAY4F,GAC7BrH,KAAK6E,iBACL7E,KAAKkI,eACP,EACArD,eAAgB,WACd,MAAMoB,EAAmB/F,SAASY,cAAc,YAChD,IAAIqH,EAAYjI,SAASkD,cAAc,OACvC+E,EAAUlF,UAAY,YACtB,IAAImF,EAAalI,SAASkD,cAAc,KACxCgF,EAAWnF,UAAY,iBACvBmF,EAAW3E,YAAc,qBACzB0E,EAAU1G,YAAY2G,GACtBnC,EAAiBxE,YAAY0G,EAC/B,EACAD,cAAe,WACb,IAAIG,EAAiBnI,SAASY,cAAc,qBACxCyE,EAAWrF,SAASY,cAAc,mBAClCwH,EAAepI,SAASqI,iBAAiB,sBAC7CF,GAAgB/H,iBAAiB,SAAUP,IACvCwF,EAASvE,UAAUwH,OAAO,UAC1BzI,EAAM0I,0BAA0B,IAEpCH,GAAcV,SAASc,IACnBA,EAAQpI,iBAAiB,SAAUqI,IAC/BnL,EAAc0C,SAASY,cAAc,6BACrCvD,EAAaoL,EAAI/E,OAAOmD,GACxBxB,EAASzE,cAAc,aAAaE,UAAUC,OAAO,UACrD0H,EAAIC,cAAc5H,UAAUqC,IAAI,UAChCkC,EAASvE,UAAUC,OAAO,UAC1B,IAAImD,EAAcV,eAAeC,QAAQhG,GACtCyG,GAAe5G,GAAauJ,KAAOxJ,IAAgC,IAAlBM,EA4HhE,WACC,IAAIsD,EAAgBjB,SAASC,eAAe,YACxCiB,EAAclB,SAASY,cAAc,YACzC,IAAIO,EAAYF,EACZG,EAAmBH,EAAcY,aAAa,kBAC7C3B,EAAkBe,EAAcd,aACrCc,EAAcI,MAAQ,GACtBJ,EAAcZ,MAAMC,OAAS,GAAGJ,MAChCgB,EAAYO,SAAS,EAAGP,EAAYf,cACpCyC,YAAW,KACV,MAAMD,EAuER,SAA8BG,EAASC,EAAWlD,EAAOmD,GACxD,IAAI/B,EAAgBjB,SAASC,eAAe,YAC5C,MAAMgD,EAASjD,SAASkD,cAAc,MACtCD,EAAOnC,UAAUqC,IAAI,OAAQ,GAAGJ,KAChC,IAAIK,EAA4B,aAAdL,EAA2B,wCAA0C,uEACvFE,EAAOK,UAAYF,EACnBH,EAAOrC,cAAc,KAAK2C,YAAcT,EACxC,IAAIoB,EAAcV,eAAeC,QAAQhG,GACzC,GAAIyG,EAAa,CAChB,IAAIb,EACU,SAAVL,EACHK,EAAkBxD,GAAO6D,OAAO7B,aAAa,iBACzB,SAAVmB,IACVK,EAAkBxD,EAAMgC,aAAa,mBAErB,YAAbkB,GAEoB,YAAbA,IADV9B,EAActB,aAAa,oBAAqB0D,EAIlD,CACA,OAAOJ,CACR,CA7FyB0F,CAAqB,gBAAiB,WAAYxH,EAAW,SACpFD,EAAYK,YAAYoB,GACxBzB,EAAYO,SAAS,EAAGP,EAAYf,cACpC0C,EAAQF,EAAgBvB,EAAiB,GACvC,IACJ,CA1IcwH,GACS1E,GAAe5G,GAAauJ,KAAOxJ,IAAgC,IAAlBM,GA2IxE,WACE,IAAIsD,EAAgBjB,SAASC,eAAe,YAC5C,IAAI4I,EAAe5H,EAAcY,aAAa,iBAC1CiH,EAAU7H,EAAcY,aAAa,YACrCiB,EAAU7B,EAAcY,aAAa,kBACtCqC,EAAcV,eAAeC,QAAQhG,GAClCsL,EAAU,CACf,OAAU,UACP,YAAe,iBACf,OAAU,iBACb,KAAQ,CACH,IAAOvL,EAAauH,eAAeE,IACnC,SAAYzH,EAAa2H,SAASC,KAClC,QAAW0D,EACX,MAAUD,EACV,UAAaxL,GAA0B,UACvC,QAAYyF,EACZ,WAAa,IAAIkG,MAAOC,YAG1B3K,EAAU,CACb,eAAgB,mBAChB,UAAWd,EAAauH,eAAeO,QACvC,aAAc,MACd,cAAiB,UAAYpB,GAE9BtG,EAAQJ,EAAauH,eAAeQ,KAAKC,OAAO,0BAA2BuD,EAASzK,GAASI,IACzF,GAAsB,MAAlBA,EAAS+G,KAAc,CACzB,IAAIzG,EAAaN,EAASZ,KAAKkB,WAC/BzB,EAAmByB,EAAWC,YAChC,MACEiK,MAAM,0BACR,GAEN,CA5KcC,EACF,GACF,IAENnJ,SAAS7B,KAAKiC,iBAAiB,SAAS,KACpCiF,GAAUvE,UAAUC,OAAO,SAAS,GAE1C,GAEFrD,EAAO0G,OAAOC,OAkPd,MAAMF,EAAa,CACjBiF,eAAgB,SAASrF,EAAaC,GACpC,IAAI/C,EAAgBjB,SAASC,eAAe,YACxCoJ,EAAiBtF,EAAYnD,cAAc,KAC3CkE,EAAStH,EAAauH,eAAeD,OACzC,IAAIwE,EAAiB,CACnB,OAAU,OACV,YAAe,cACf,OAAU,cACV,KAAQ,CACN,IAAO9L,EAAauH,eAAeE,IACnC,UAAaH,GAAkB,GAC/B,SAAYtH,EAAa2H,SAASC,KAClC,QAAWnE,EAAcY,aAAa,YACtC,MAAUZ,EAAcY,aAAa,gBACrC,UAAaxE,GAA0B,UACvC,QAAY2G,EACZ,WAAa,IAAIgF,MAAOC,YAGxB3K,EAAU,CACZ,eAAgB,mBAChB,UAAWd,EAAauH,eAAeO,QACvC,aAAc,OAElB1H,EAAQJ,EAAauH,eAAeQ,KAAKC,OAAO,yBAA0B8D,EAAgBhL,GAASI,IAClG8E,eAAe+F,QAAQ9L,EAAgBiB,GAAUZ,MAAM0L,cACpD,IAAIC,EAAe/K,EAASZ,KAAK4L,QAAQC,cACzCC,EAAYH,GAAc/K,EAAUuC,EAAeoI,EAAgBrF,EAAY,IAEnFqF,EAAe9F,YAAc,EAC7B,EACAsG,YAAa,SAAS9F,EAAaC,GACjC,IAAI/C,EAAgBjB,SAASC,eAAe,YAC5C,IAAIoB,EAAQrB,SAASC,eAAe,YAAY4B,aAAa,qBAC7D,IAAIwH,EAAiBtF,EAAYnD,cAAc,KAC/C,IAAIsD,EAAcV,eAAeC,QAAQhG,GACrCsL,EAAU,CACf,OAAU,UACP,YAAe,iBACf,OAAU,cACb,KAAQ,CACH,IAAOvL,EAAauH,eAAeE,IACnC,SAAYzH,EAAa2H,SAASC,KAClC,QAAWnE,EAAcY,aAAa,YACtC,MAAUR,EACV,UAAahE,GAA0B,UACvC,QAAY2G,EACZ,WAAa,IAAIgF,MAAOC,YAG1B3K,EAAU,CACb,eAAgB,mBAChB,UAAWd,EAAauH,eAAeO,QACvC,aAAc,MACd,cAAiB,UAAYpB,GAE9BtG,EAAQJ,EAAauH,eAAeQ,KAAKC,OAAO,0BAA2BuD,EAASzK,GAASI,IACzF,GAAsB,MAAlBA,EAAS+G,KAAc,CACzB,IAAIgE,EAAe/K,EAASZ,KAAK4L,QAAQC,cACzCC,EAAYH,GAAc/K,EAAUuC,EAAeoI,EAAgBrF,EAAaE,EAClF,MACEgF,MAAM,0BACR,IAEJG,EAAe9F,YAAc,EAC7B,GAGIqG,EAAc,CAClBE,SAAU,SAASpL,EAAUuC,EAAeoI,EAAgBrF,EAAaE,EAAc,IACnF,MAAM2B,EAAUnH,EAASZ,KAAK4L,QACxB5D,EAAWpH,EAASZ,KAAK4L,QAAQ5D,SACvC7E,EAActB,aAAa,eAAgBkG,EAAQM,kBACnDlF,EAActB,aAAa,gBAAiBkG,EAAQO,aACpDnF,EAActB,aAAa,WAAYkG,EAAQQ,KAC/CpF,EAActB,aAAa,iBAAkBqE,GACzCE,EACFjD,EAAcgD,gBAAgB,YAE9BhD,EAActB,aAAa,WAAY,OAErCkG,GAAS7G,YAAYF,EAAsB+G,EAAS5E,GAC3D,IAAI8I,EAAa/J,SAASgK,eAAelE,EAASA,UAClDuD,EAAe9H,YAAYwI,EAC5B,EACAE,MAAO,SAASvL,EAAUuC,EAAeoI,EAAgBrF,EAAaE,EAAc,IAClF,MAAM2B,EAAUnH,EAASZ,KAAK4L,QACxB5D,EAAWpH,EAASZ,KAAK4L,QAAQ5D,SACjCoE,EAAkBxL,EAASZ,KAAK4L,QAAQS,QAC9C,IAAIC,EAAkBpK,SAASkD,cAAc,KAC7CkH,EAAgBtJ,UAAUqC,IAAI,cAC9B,IAAIkH,EAAcrK,SAASgK,eAAelE,EAASA,UACnDsE,EAAgB7I,YAAY8I,GAC5BhB,EAAe9H,YAAY6I,GAE3BF,EAAgBxC,SAAQ4C,IACpB,IAAIC,EAAcvK,SAASkD,cAAc,UACzCqH,EAAYzJ,UAAUqC,IAAI,gBAC1BoH,EAAY5K,aAAa,eAAgB2K,EAAcnE,kBACvDoE,EAAY5K,aAAa,QAAS2K,EAAcxE,UAChD7E,EAActB,aAAa,iBAAkBqE,GAC7C/C,EAActB,aAAa,gBAAiBkG,EAAQO,aACpDnF,EAActB,aAAa,WAAYkG,EAAQQ,KAC3CnC,EACFjD,EAAcgD,gBAAgB,YAE9BhD,EAActB,aAAa,WAAY,OAEzC,IAAIoK,EAAa/J,SAASgK,eAAeM,EAAcxE,UACvDyE,EAAYhJ,YAAYwI,GACxBV,EAAe9H,YAAYgJ,GAC3BA,EAAYnK,iBAAiB,QAASuD,EAAW,IAErD3D,SAASC,eAAe,YAAYX,YAAc,wBAClDU,SAASC,eAAe,YAAYN,aAAa,YAAW,EAC9D,GAGI0C,EAAkB,CACtBC,MAAO,SAAUjB,GACf,MAAO,CAAEA,MAAgB,IAATA,EAAa3B,KAAM,WACrC,EACA8K,gBAAiB,SAAUC,GACzB,MAAO,CAAEpJ,MAAOoJ,EAAQ3I,YAAY4I,KAAKD,EAAQpJ,OAAQ3B,KAAM,kBACjE,EACAiL,kBAAmB,SAAUF,GAC3B,MAAO,CAAEpJ,MAAOoJ,EAAQ3I,YAAY4I,KAAKD,EAAQpJ,OAAQ3B,KAAM,oBACjE,EACAkL,uBAAwB,SAAUH,GAChC,MAAO,CAAEpJ,MAAOoJ,EAAQ3I,YAAY4I,KAAKD,EAAQpJ,OAAQ3B,KAAM,yBACjE,EACAmL,gBAAiB,SAAUJ,GACzB,MAAO,CAAEpJ,MAAOoJ,EAAQ3I,YAAY4I,KAAKD,EAAQpJ,OAAQ3B,KAAM,kBACjE,EACAoL,cAAe,SAAUL,GACvB,MAAO,CAAEpJ,MAAOoJ,EAAQ3I,YAAY4I,KAAKD,EAAQpJ,OAAQ3B,KAAM,gBACjE,E","sources":["webpack://chatbot-fe/./public/widget/plugin/widget.js"],"sourcesContent":["\"use strict\";\n\nlet widget = {}, \ncurrentlan, \npreviouslan, \nchatInput, \nchatbotCloseBtn,\nvalidationErr = false, \nvalidationErrMsg,\nconfigParams, \nSESSION_ID_KEY;\n\nwidget.global = {\n  init: function init() {\n    this.appInfo(),\n    this.bootApp();\n    this.createContainer();\n    this.createHeader();\n    this.chatInputBox();\n    this.powerdByFooter();\n  },\n  appInfo: function appInfo() {\n    configParams = window.parent;\n    document.addEventListener('click', handleClickEvents);\n  },\n  bootApp: function bootApp() {\n    var cookie = configParams.chatBotConfig?.cookie;\n    let loginRequest = {\n      \"module\": \"ChatBot\",\n      \"module_code\": \"ChatBotBoot\",\n      \"action\": \"connectBot\",\n      \"data\" : {\n        \"bot\": configParams.chatBotConfig?.bot,\n        \"client_id\": cookie ? cookie : \"\",\n        \"source\": configParams.chatBotConfig?.messanger,\n        \"page_url\": configParams.location.href,\n        \"language\": configParams.chatBotConfig?.language\n      }\n    };\n    let headers = {\n      \"Content-Type\": \"application/json\",\n      \"api-key\": configParams.chatBotConfig?.api_key,\n      \"api-source\": 'web'\n    };\n    apiCall(configParams.chatBotConfig?.host.concat(\"api/v1/chatbot/boot\"), loginRequest, headers, response => {\n      if (response.code == 200) {\n        SESSION_ID_KEY = response.data.config.session_key;\n        window.sessionStorage.removeItem(SESSION_ID_KEY);\n        const resData = response.data.question;\n        const question = response.data.question.question;\n        const chatbotContainer = document.querySelector('.chatbot');\n        var chatboxUl = document.createElement(\"ul\");\n        chatboxUl.className = \"chatbox\";\n        var chatLi = document.createElement(\"li\");\n        chatLi.className = \"chat incoming\";\n        var chatLogoSpan = document.createElement(\"span\");\n        chatLogoSpan.className = \"chatLogo\";\n        chatLi.appendChild(chatLogoSpan);\n        var chatMessageP = document.createElement(\"p\");\n        chatMessageP.textContent = question.question;\n        chatLi.appendChild(chatMessageP);\n        chatboxUl.appendChild(chatLi);\n        chatbotContainer.appendChild(chatboxUl);\n        var chatUserInput = document.getElementById(\"userText\");\n        chatUserInput.setAttribute('bot_question', resData.next_question_id);\n        chatUserInput.setAttribute('pervious-ques', resData.question_id);\n        chatUserInput.setAttribute('chat-uid', resData._id);\n        if (resData?.validation) setValidatorAttribute(resData, chatUserInput);\n        this.languageDropDown(response.data.language);\n      } else {\n        const chatbotContainer = document.querySelector('.chatbot');\n        const body = document.createElement('div');\n        body.className = 'body';\n        const bodyImg = document.createElement('img');\n        bodyImg.src = configParams.chatBotConfig?.boot_host + 'dist/assets/images/401.png';\n        bodyImg.alt = 'Chat Image';\n        bodyImg.style.width = '100%';\n        bodyImg.style.height = '66%';\n        body.appendChild(bodyImg);\n        chatbotContainer.appendChild(body);\n      }\n    });\n  },\n  createContainer: function createContainer() {\n    const chatBotContainer = document.createElement('div');\n    chatBotContainer.id = 'chatbot-container';\n    document.body.appendChild(chatBotContainer);\n    const chatbot = document.createElement('div');\n    chatbot.classList.add('chatbot');\n    chatBotContainer.appendChild(chatbot);\n  },\n  createHeader: function createHeader() {\n    const chatbotContainer = document.querySelector('.chatbot');\n    var header = document.createElement(\"header\");\n    header.className = \"header\";\n    var img = document.createElement(\"img\");\n    img.src = configParams.chatBotConfig?.boot_host + \"dist/assets/images/chat-avator.png\";\n    img.alt = \"\";\n    header.appendChild(img);\n    var h2 = document.createElement(\"h2\");\n    h2.textContent = \"CHAT with ShriA\";\n    header.appendChild(h2);\n    var closeBtn = document.createElement(\"span\");\n    closeBtn.className = \"close-btn material-symbols-outlined\";\n    closeBtn.textContent = \"close\";\n    header.appendChild(closeBtn);\n    chatbotContainer.appendChild(header);\n  },\n  chatInputBox: function chatInputBox() {\n    const chatbotContainer = document.querySelector('.chatbot');\n    var chatInputDiv = document.createElement(\"div\");\n    chatInputDiv.className = \"chat-input\";\n    var textarea = document.createElement(\"textarea\");\n    textarea.id = \"userText\";\n    textarea.setAttribute(\"placeholder\", \"Enter a message..\");\n    textarea.setAttribute(\"required\", \"\");\n    chatInputDiv.appendChild(textarea);\n    chatbotContainer.appendChild(chatInputDiv);\n  },\n  languageDropDown: function languageDropDown(language) {\n    const chatbotContainer = document.querySelector('.chatbot');\n    const chatInputDiv = document.querySelector('.chat-input');\n    var languageDiv = document.createElement(\"div\");\n    languageDiv.className = \"language\";\n    var languageButton = document.createElement(\"button\");\n    languageButton.className = \"language__action\";\n    languageDiv.appendChild(languageButton);\n    var languageUl = document.createElement(\"ul\");\n    languageUl.id = \"CurrentLang\";\n    languageUl.className = \"language__list\";\n    var languages = [];\n    var languageIds = [];\n    language.forEach((value) => {\n      languages.push(value.language_name);\n    });\n    language.forEach((value) => {\n      languageIds.push(value.language);\n    });\n    languages.forEach((value, index) => {\n        var li = document.createElement(\"li\");\n        li.value = languageIds[index];\n        li.id = languageIds[index];\n        li.setAttribute('value', languageIds[index]);\n        if (index === 0) {\n            li.className = \"active\";\n        }\n        li.textContent = value;\n        languageUl.appendChild(li);\n    });\n    languageDiv.appendChild(languageUl);\n    chatInputDiv.appendChild(languageDiv);\n\n    var sendBtn = document.createElement(\"span\");\n    sendBtn.id = \"send-btn\";\n    sendBtn.className = \"material-symbols-outlined\";\n    sendBtn.textContent = \"send\";\n    chatInputDiv.appendChild(sendBtn);\n    chatbotContainer.appendChild(chatInputDiv);\n    this.powerdByFooter();\n    this.languageEvent();\n  },\n  powerdByFooter: function powerdByFooter() {\n    const chatbotContainer = document.querySelector('.chatbot');\n    var footerDiv = document.createElement(\"div\");\n    footerDiv.className = \"poweredBy\";\n    var footerText = document.createElement(\"p\");\n    footerText.className = \"powerdBy__text\";\n    footerText.textContent = \"⚡️Powered by surya\";\n    footerDiv.appendChild(footerText);\n    chatbotContainer.appendChild(footerDiv);\n  },\n  languageEvent: function languageEvent() {\n    let languageAction = document.querySelector('.language__action');\n    let language = document.querySelector('.language__list');\n    let languageList = document.querySelectorAll('.language__list li');\n    languageAction?.addEventListener('click', (event)=>{\n        language.classList.toggle('active');\n        event.stopImmediatePropagation();\n    });\n    languageList?.forEach((element)=>{\n        element.addEventListener('click', (ele)=>{\n            previouslan = document.querySelector('.language__list li.active')\n            currentlan = ele.target.id;\n            language.querySelector('li.active').classList.remove('active');\n            ele.currentTarget.classList.add('active');\n            language.classList.remove('active');\n            let accessToken = sessionStorage.getItem(SESSION_ID_KEY);\n            if(accessToken && previouslan?.id !== currentlan && validationErr === false){\n              handlePreviousChat();\n            } else if (accessToken && previouslan?.id !== currentlan && validationErr === true){\n              handleErrorMessage();\n            }\n        });\n    });\n    document.body.addEventListener('click', ()=>{\n        language?.classList.remove('active');\n    });\n  }\n};\nwidget.global.init();\n\nfunction apiCall(url, data, headersReq, callbackRes){\n  fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: headersReq\n    }).then(res => res.json())\n    .then(response => callbackRes(response)\n    )\n    .catch(error => console.error('Error:', error));\n}\n\nfunction setValidatorAttribute(data, messageInput){\n  let validation = data?.validation;\n  validationErrMsg = validation?.errorMessage;\n  const minLength = validation?.minLength;\n  const maxLength = validation?.maxLength;\n  const regexPattern = validation?.regexPattern;\n  const placeHolder = validation?.placeholder ? validation?.placeholder : \"Write here…\";\n  const autoComplete = validation?.autocomplete;\n  const validator = validation?.type;\n  if (minLength) messageInput.setAttribute(\"minlength\", minLength);\n  if (maxLength) messageInput.setAttribute(\"maxlength\", maxLength);\n  if (regexPattern) messageInput.setAttribute(\"pattern\", regexPattern);\n  if (validator) messageInput.setAttribute(\"data-validator-type\", validator);\n  if (autoComplete) messageInput.setAttribute(\"autocomplete\", autoComplete);\n  if (placeHolder) messageInput.setAttribute(\"placeholder\", placeHolder);\n}\n\nfunction handleClickEvents(event){\n  this.chatInput = document.getElementById(\"userText\");\n  let inputInitHeight = this.chatInput.scrollHeight;\n  this.chatInput.addEventListener(\"input\", () => {\n    this.chatInput.style.height = `${inputInitHeight}px`;\n    this.chatInput.style.height = `${this.chatInput.scrollHeight}px`;\n  });\n  this.chatInput.addEventListener(\"keydown\", (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleChat();\n    }\n  });\n  const sendChatBtn = document.querySelector(\"#send-btn\");\n  sendChatBtn.addEventListener('click', (e)=>{\n    e.preventDefault();\n    handleChat();\n  });\n  this.chatbotCloseBtn = document.querySelector(\".close-btn\");\n  this.chatbotCloseBtn.addEventListener(\"click\", () => {\n    document.body.classList.remove(\"show-chatbot\");\n    configParams.document.body.classList.remove(\"show-chatbot\");\n  });\n}\n\nasync function handleChat() {\n    var chatUserInput = document.getElementById(\"userText\");\n    var chatUserbox = document.querySelector(\".chatbox\");\n    let userInput = chatUserInput;\n    let userInputMessage = chatUserInput.value.trim();\n    if (!userInputMessage) return;\n\n    let inputInitHeight = chatUserInput.scrollHeight\n    chatUserInput.value = \"\";\n    chatUserInput.style.height = `${inputInitHeight}px`;\n  \n    chatUserbox.appendChild(createChatLi(userInputMessage, \"outgoing\", userInput, \"input\"));\n    chatUserbox.scrollTo(0, chatUserbox.scrollHeight);\n\n    /*| validate data start |*/\n    let validatorGet = validatorAttribute(chatUserInput);\n    let validation = await validator(validatorGet.regexObject, userInputMessage, validatorGet.minMaxValues, validatorGet.fieldValidator);\n    if (validation?.validation === false) {\n        validationErr = true;\n        let validationStatus =  true;\n        const incomingChatLi = createChatLi(validationErrMsg[validation?.type], \"incoming\", userInput, \"input\", validationStatus);\n        chatUserbox.appendChild(incomingChatLi);\n        chatUserbox.scrollTo(0, chatUserbox.scrollHeight);\n        return;\n    }\n    /*| validate data end |*/\n    if (validation !== false) {\n      validationErr = false;\n      setTimeout(() => {\n        const incomingChatLi = createChatLi(\"Thinking ....\", \"incoming\", userInput, \"input\");\n        chatUserbox.appendChild(incomingChatLi);\n        chatUserbox.scrollTo(0, chatUserbox.scrollHeight);\n        execute(incomingChatLi, userInputMessage);\n      }, 600);\n    }\n}\n\nfunction validatorAttribute(chatUserInput) {\n  let minMaxValues = {};\n  const fieldValidator = chatUserInput.getAttribute(\"data-validator-type\");\n  const minLength = chatUserInput.getAttribute(\"minlength\");\n  const maxLength = chatUserInput.getAttribute(\"maxlength\");\n  const regexPattern = chatUserInput.getAttribute(\"pattern\");\n  const regexObject = new RegExp(regexPattern);\n  if (minLength || maxLength) {\n      minMaxValues = {\n        minlength: minLength ? parseInt(minLength) : \"\",\n        maxlength: maxLength ? parseInt(maxLength) : \"\",\n      };\n  }\n  return {\n    \"minMaxValues\" : minMaxValues,\n    \"regexObject\" : regexObject,\n    \"fieldValidator\" : fieldValidator,\n  };\n}\n\nfunction handlePreviousChat() {\n\tvar chatUserInput = document.getElementById(\"userText\");\n\tvar chatUserbox = document.querySelector(\".chatbox\");\n\tlet userInput = chatUserInput;\n\tlet userInputMessage = chatUserInput.getAttribute(\"previous-input\");\n  let inputInitHeight = chatUserInput.scrollHeight\n\tchatUserInput.value = \"\";\n\tchatUserInput.style.height = `${inputInitHeight}px`;\n\tchatUserbox.scrollTo(0, chatUserbox.scrollHeight);\n\tsetTimeout(() => {\n\t\tconst incomingChatLi = createPreviousChatLi(\"Thinking ....\", \"incoming\", userInput, \"input\");\n\t\tchatUserbox.appendChild(incomingChatLi);\n\t\tchatUserbox.scrollTo(0, chatUserbox.scrollHeight);\n\t\texecute(incomingChatLi, userInputMessage);\n\t}, 600);\n}\n\nfunction handleErrorMessage() {\n  var chatUserInput = document.getElementById(\"userText\");\n  let questionCode = chatUserInput.getAttribute('pervious-ques');\n  let chatUid = chatUserInput.getAttribute('chat-uid');\n  let message = chatUserInput.getAttribute('previous-input');\n\tlet accessToken = sessionStorage.getItem(SESSION_ID_KEY);\n    let chatReq = {\n\t\t\t\"module\": \"ChatBot\",\n      \"module_code\": \"chatBotService\",\n      \"action\": \"chatErrMessage\",\n\t\t\t\"data\": {\n        \"bot\": configParams.chatBotConfig?.bot,\n        \"page_url\": configParams.location.href,\n        \"chatUId\": chatUid,\n        \"qCode\" : questionCode,\n        \"qLanguage\": currentlan ? currentlan : \"ENGLISH\",\n        \"message\" : message,\n        \"timestamp\": new Date().getTime()\n\t\t\t}\n\t\t}\n\t\tlet headers = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\"api-key\": configParams.chatBotConfig?.api_key,\n\t\t\t\"api-source\": 'web',\n\t\t\t\"Authorization\": 'Bearer ' + accessToken\n\t\t}\n\t\tapiCall(configParams.chatBotConfig?.host.concat(\"api/v1/chatbot/service\"), chatReq, headers, response => {\n      if (response.code === 200) {\n        let validation = response.data.validation;\n        validationErrMsg = validation.errorMessage;\n      } else {\n        alert(\"something went wrong..!\");\n      }\n\t\t});\n}\n\nfunction createChatLi(message, className, event, action, validationStatus = false) {\n  var chatUserInput = document.getElementById(\"userText\");\n\tconst chatLi = document.createElement(\"li\");\n\tchatLi.classList.add(\"chat\", `${className}`);\n\tlet chatContent = className === \"outgoing\" ? `<p></p><span class=\"userLogo\"></span>` : `<span class=\"chatLogo\"></span><p><span class=\"botAnswer\"></span></p>`;\n\tchatLi.innerHTML = chatContent;\n\tchatLi.querySelector(\"p\").textContent = message;\n  let accessToken = sessionStorage.getItem(SESSION_ID_KEY);\n\tif (accessToken) {\n\t\tvar userCurrentCode;\n\t\tif (action == \"click\") {\n\t\t\t  userCurrentCode = event?.target.getAttribute('bot_question');\n\t\t} else if (action == \"input\") {\n        if (validationStatus) {\n          userCurrentCode = event.getAttribute('pervious-ques');\n        } else {\n          userCurrentCode = event.getAttribute('bot_question');\n        }\n\t\t}\n\t\tif (className == \"outgoing\") {\n\t\t\tchatUserInput.setAttribute('user-current-code', userCurrentCode);\n\t\t} else if (className == \"incoming\") {\n\t\t\tchatUserInput.setAttribute('user-current-code', userCurrentCode);\n\t\t}\n\t}\n\treturn chatLi;\n}\n\nfunction createPreviousChatLi(message, className, event, action) {\n\tvar chatUserInput = document.getElementById(\"userText\");\n\tconst chatLi = document.createElement(\"li\");\n\tchatLi.classList.add(\"chat\", `${className}`);\n\tlet chatContent = className === \"outgoing\" ? `<p></p><span class=\"userLogo\"></span>` : `<span class=\"chatLogo\"></span><p><span class=\"botAnswer\"></span></p>`;\n\tchatLi.innerHTML = chatContent;\n\tchatLi.querySelector(\"p\").textContent = message;\n\tlet accessToken = sessionStorage.getItem(SESSION_ID_KEY);\n\tif (accessToken) {\n\t\tvar userCurrentCode;\n\t\tif (action == \"click\") {\n\t\t\tuserCurrentCode = event?.target.getAttribute('pervious-ques');\n\t\t} else if (action == \"input\") {\n\t\t\tuserCurrentCode = event.getAttribute('pervious-ques');\n\t\t}\n\t\tif (className == \"outgoing\") {\n\t\t\tchatUserInput.setAttribute('user-current-code', userCurrentCode);\n\t\t} else if (className == \"incoming\") {\n\t\t\tchatUserInput.setAttribute('user-current-code', userCurrentCode);\n\t\t}\n\t}\n\treturn chatLi;\n}\n\nfunction createLink(event) {\n\tvar chatUserbox = document.querySelector(\".chatbox\");\n\tlet getEventVal = event.target.value;\n\tlet userInputMessage = getEventVal.trim();\n\tif (!userInputMessage) return;\n\n\tconst outGoingChatLi = createChatLi(userInputMessage, \"outgoing\", event, \"click\");\n\tchatUserbox.appendChild(outGoingChatLi);\n\tchatUserbox.scrollTo({ bottom: 0, behavior: \"smooth\" });\n\tsetTimeout(() => {\n\t\tconst incomingChatLi = createChatLi(\"Thinking1 ....\", \"incoming\", event, \"click\");\n\t\tchatUserbox.appendChild(incomingChatLi);\n\t\tchatUserbox.scrollTo({ bottom: 0, behavior: \"smooth\" });\n\t\texecute(incomingChatLi, userInputMessage, event);\n\t}, 600);\n}\n\nfunction execute(chatElement, userMessage) {\n\tdocument.getElementById(\"userText\").placeholder = \"Enter a message...\";\n\tdocument.getElementById(\"userText\").removeAttribute(\"disabled\");\n  let accessToken = sessionStorage.getItem(SESSION_ID_KEY);\n  let methodName = accessToken ? 'chatService' : 'authentication';\n  chatModule[methodName](chatElement, userMessage);\n}\n\nconst chatModule = {\n  authentication: function(chatElement, userMessage) {\n    var chatUserInput = document.getElementById(\"userText\");\n    var messageElement = chatElement.querySelector(\"p\");\n    var cookie = configParams.chatBotConfig?.cookie;\n    let loginAccessReq = {\n      \"module\": \"Auth\",\n      \"module_code\": \"ChatBotAuth\",\n      \"action\": \"loginAccess\",\n      \"data\": {\n        \"bot\": configParams.chatBotConfig?.bot,\n        \"client_id\": cookie ? cookie : \"\",\n        \"page_url\": configParams.location.href,\n        \"chatUId\": chatUserInput.getAttribute(\"chat-uid\"),\n        \"qCode\" : chatUserInput.getAttribute(\"bot_question\"),\n        \"qLanguage\": currentlan ? currentlan : \"ENGLISH\",\n        \"message\" : userMessage,\n        \"timestamp\": new Date().getTime()\n      }\n    }\n    let headers = {\n      \"Content-Type\": \"application/json\",\n      \"api-key\": configParams.chatBotConfig?.api_key,\n      \"api-source\": 'web'\n    };\n\t\tapiCall(configParams.chatBotConfig?.host.concat(\"api/v1/authentication\"), loginAccessReq, headers, response => {\n\t\t\tsessionStorage.setItem(SESSION_ID_KEY, response?.data?.access_token);\n      let questionType = response.data.context.question_type;\n      eventModule[questionType](response, chatUserInput, messageElement, userMessage);\n\t\t});\n\t\tmessageElement.textContent = \"\";\n  },\n  chatService: function(chatElement, userMessage) {\n    var chatUserInput = document.getElementById(\"userText\");\n    let value = document.getElementById(\"userText\").getAttribute(\"user-current-code\");\n    var messageElement = chatElement.querySelector(\"p\");\n    let accessToken = sessionStorage.getItem(SESSION_ID_KEY);\n    let chatReq = {\n\t\t\t\"module\": \"ChatBot\",\n      \"module_code\": \"chatBotService\",\n      \"action\": \"chatService\",\n\t\t\t\"data\": {\n        \"bot\": configParams.chatBotConfig?.bot,\n        \"page_url\": configParams.location.href,\n        \"chatUId\": chatUserInput.getAttribute(\"chat-uid\"),\n        \"qCode\" : value,\n        \"qLanguage\": currentlan ? currentlan : \"ENGLISH\",\n        \"message\" : userMessage,\n        \"timestamp\": new Date().getTime()\n\t\t\t}\n\t\t}\n\t\tlet headers = {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\"api-key\": configParams.chatBotConfig?.api_key,\n\t\t\t\"api-source\": 'web',\n\t\t\t\"Authorization\": 'Bearer ' + accessToken\n\t\t}\n\t\tapiCall(configParams.chatBotConfig?.host.concat(\"api/v1/chatbot/service\"), chatReq, headers, response => {\n      if (response.code === 200) {\n        let questionType = response.data.context.question_type;\n        eventModule[questionType](response, chatUserInput, messageElement, userMessage, accessToken);\n      } else {\n        alert(\"something went wrong..!\");\n      }\n\t\t});\n\t\tmessageElement.textContent = \"\";\n  }\n};\n\nconst eventModule = {\n  inputBox: function(response, chatUserInput, messageElement, userMessage, accessToken = '') {\n      const resData = response.data.context;\n      const question = response.data.context.question;\n      chatUserInput.setAttribute('bot_question', resData.next_question_id);\n      chatUserInput.setAttribute('pervious-ques', resData.question_id);\n      chatUserInput.setAttribute('chat-uid', resData._id);\n      chatUserInput.setAttribute('previous-input', userMessage);\n      if (accessToken) {\n        chatUserInput.removeAttribute('authques');\n      } else { \n        chatUserInput.setAttribute('authques', \"yes\");\n      }\n      if (resData?.validation) setValidatorAttribute(resData, chatUserInput);\n\t\t\tvar optionText = document.createTextNode(question.question);\n\t\t\tmessageElement.appendChild(optionText);\n  },\n  radio: function(response, chatUserInput, messageElement, userMessage, accessToken = '') {\n    const resData = response.data.context;\n    const question = response.data.context.question;\n    const questionOptions = response.data.context.options;\n    var questionElement = document.createElement('p');\n    questionElement.classList.add(\"designText\");\n    var QustionText = document.createTextNode(question.question);\n    questionElement.appendChild(QustionText);\n    messageElement.appendChild(questionElement);\n\n    questionOptions.forEach(questionValue => {\n        var optionValue = document.createElement(\"button\");\n        optionValue.classList.add('selectOptBtn');\n        optionValue.setAttribute(\"bot_question\", questionValue.next_question_id);\n        optionValue.setAttribute(\"value\", questionValue.question);\n        chatUserInput.setAttribute('previous-input', userMessage);\n        chatUserInput.setAttribute('pervious-ques', resData.question_id);\n        chatUserInput.setAttribute('chat-uid', resData._id);\n        if (accessToken) {\n          chatUserInput.removeAttribute('authques');\n        } else { \n          chatUserInput.setAttribute('authques', \"yes\");\n        }\n        var optionText = document.createTextNode(questionValue.question);\n        optionValue.appendChild(optionText);\n        messageElement.appendChild(optionValue);\n        optionValue.addEventListener(\"click\", createLink);\n    });\n    document.getElementById(\"userText\").placeholder = \"Please select options\";\n    document.getElementById(\"userText\").setAttribute(\"disabled\",true);\n  }\n};\n\nconst validatorObject = {\n  empty: function (value) {\n    return { value: value == \"\", type: \"required\" };\n  },\n  alphaValidation: function (dataObj) {\n    return { value: dataObj.regexObject.test(dataObj.value), type: \"alphaValidation\" };\n  },\n  numericValidation: function (dataObj) {\n    return { value: dataObj.regexObject.test(dataObj.value), type: \"numericValidation\" };\n  },\n  alphaNumericValidation: function (dataObj) {\n    return { value: dataObj.regexObject.test(dataObj.value), type: \"alphaNumericValidation\" };\n  },\n  emailValidation: function (dataObj) {\n    return { value: dataObj.regexObject.test(dataObj.value), type: \"emailValidation\" };\n  },\n  panValidation: function (dataObj) {\n    return { value: dataObj.regexObject.test(dataObj.value), type: \"panValidation\" };\n  },\n};\n\nasync function validator(regexObject, dataValue, minMaxValues, validator) {\n  if (dataValue == validatorObject.empty(dataValue).value) {\n      return { validation: false, type: 'empty' };\n  } else if (minMaxValues?.minlength && dataValue.length < minMaxValues.minlength) {\n      return { validation: false, type: 'minLength' };\n  } else if (minMaxValues?.maxlength && dataValue.length > minMaxValues.maxlength) {\n      return { validation: false, type: 'maxLength' };\n  }\n\n  if (regexObject && validator && validatorObject[validator] && typeof validatorObject[validator] === \"function\") {\n      let dataObject = {\n        value: dataValue,\n        regexObject: regexObject,\n      };\n      let validationObj = validatorObject[validator](dataObject);\n      return {\n        validation : validationObj.value ? validationObj.value : false,\n        type: validationObj.type\n      };\n  }\n  return { validation: true, type: \"\" };\n}\n"],"names":["currentlan","previouslan","validationErrMsg","configParams","SESSION_ID_KEY","widget","validationErr","apiCall","url","data","headersReq","callbackRes","fetch","method","body","JSON","stringify","headers","then","res","json","response","catch","error","console","setValidatorAttribute","messageInput","validation","errorMessage","minLength","maxLength","regexPattern","placeHolder","placeholder","autoComplete","autocomplete","validator","type","setAttribute","handleClickEvents","event","this","chatInput","document","getElementById","inputInitHeight","scrollHeight","addEventListener","style","height","e","key","shiftKey","preventDefault","handleChat","querySelector","chatbotCloseBtn","classList","remove","async","chatUserInput","chatUserbox","userInput","userInputMessage","value","trim","appendChild","createChatLi","scrollTo","validatorGet","minMaxValues","fieldValidator","getAttribute","regexObject","RegExp","minlength","parseInt","maxlength","validatorAttribute","dataValue","validatorObject","empty","length","dataObject","validationObj","validationStatus","incomingChatLi","setTimeout","execute","message","className","action","chatLi","createElement","add","chatContent","userCurrentCode","innerHTML","textContent","sessionStorage","getItem","target","createLink","outGoingChatLi","bottom","behavior","chatElement","userMessage","removeAttribute","accessToken","chatModule","global","init","appInfo","bootApp","createContainer","createHeader","chatInputBox","powerdByFooter","window","parent","cookie","chatBotConfig","loginRequest","bot","messanger","location","href","language","api_key","host","concat","code","config","session_key","removeItem","resData","question","chatbotContainer","chatboxUl","chatLogoSpan","chatMessageP","next_question_id","question_id","_id","languageDropDown","bodyImg","src","boot_host","alt","width","chatBotContainer","id","chatbot","header","img","h2","closeBtn","chatInputDiv","textarea","languageDiv","languageButton","languageUl","languages","languageIds","forEach","push","language_name","index","li","sendBtn","languageEvent","footerDiv","footerText","languageAction","languageList","querySelectorAll","toggle","stopImmediatePropagation","element","ele","currentTarget","createPreviousChatLi","handlePreviousChat","questionCode","chatUid","chatReq","Date","getTime","alert","handleErrorMessage","authentication","messageElement","loginAccessReq","setItem","access_token","questionType","context","question_type","eventModule","chatService","inputBox","optionText","createTextNode","radio","questionOptions","options","questionElement","QustionText","questionValue","optionValue","alphaValidation","dataObj","test","numericValidation","alphaNumericValidation","emailValidation","panValidation"],"sourceRoot":""}